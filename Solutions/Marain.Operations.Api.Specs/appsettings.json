{
  "AzureWebJobsStorage": "UseDevelopmentStorage=true",
  "FUNCTIONS_WORKER_RUNTIME": "dotnet",
  "APPINSIGHTS_INSTRUMENTATIONKEY": "",
  "AI:DeveloperMode": "true",

  // If running with a local tenancy service, point TenancyClient:TenancyServiceBaseUri at the localhost address for that
  // and set the ResourceIdForMsiAuthentication to an empty string.
  //"TenancyClient:TenancyServiceBaseUri": "http://localhost:7071/",
  "TenancyClient:TenancyServiceBaseUri": "https://mardevtenancy.azurewebsites.net/",
  "TenancyClient:ResourceIdForMsiAuthentication": "e7281b1b-6540-4c1b-ac18-eb0c2d42bfbf",

  "TestBlobStorageConfiguration:AccountName": "DefaultEndpointsProtocol=https;AccountName=endteststorage;AccountKey=4eGe47Nfx1VEucftKqYlr/CKp/X0sWWqd6yzS3TQxxg9om9H2/fpcPNMe1D6Ku00uQf7Z4qL4KgaPpy6xccJVQ==;EndpointSuffix=core.windows.net",

  // If you are running locally but your tenant configuration is making use of resources in Azure, this local service will
  // need to authenticate. And for that to work, you won't be able to use the normal az cli-based
  // AzureServicesAuthConnectionString (because az cli is only able to obtain tokens for a fixed set of known Microsoft
  // resource; it can't be used to obtain tokens for arbitrary applications that we've defined). Instead, you'll need to
  // create a suitable service principle in AAD, grant that service principle access to the tenancy service, and set up the
  // credentials like this instead of the setting above:
  "AzureServicesAuthConnectionString": "RunAs=App;AppId=01300d87-22a8-4c63-b5b3-8a2325ad1c22;TenantId=0f621c67-98a0-4ed5-b5bd-31a35be41e29;AppKey=9n3M5X_zd99DD9Z.ko_91v_tShjBBGtI~G"
}