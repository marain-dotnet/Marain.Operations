openapi: "3.0.0"
info:
  version: 1.0.0
  title: Marain Operations Control
  license:
    name: Endjin Limited
  description: >
    This API is used by services that implement long-running operations to define and update
    operations reported through the Operations Status API. E.g., consider some service called
    SlowService which provides an operation DoSlowWork, in which clients invoke the operation with
    an HTTP POST to https://slowservice.marain.net/api/DoSlowWork and this endpoint conforms to the
    long-running operation spec at https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#1322-post
    as amended by https://github.com/Microsoft/api-guidelines/pull/101 - the DoSlowWork should
    provide an HTTP response with a status code of 202, and a Location header referring to a
    resource representing the operation, as provided by the Operations Status API, e.g.
    https://operationsstatus.marain.net/api/operationsstatus/{opId} where {opId} is the unique
    identifier of the operation. For that Location URL to work, the DoSlowWork service must first
    create the operation using this Operations Control API's CreateOperation operation. This
    provides the URL for the operation in its Location header, which the DoSlowWork service can
    then return in its own Location header. The client of the DoSlowWork service can then use this
    to track the progress of the operation. Meanwhile, the SlowService can update what that client
    will see using the other operations provided by this Operations Control API. When work
    commences, it will use SetOperationRunning to move it from the "Not Started" state into the
    "Running" state, and it may optionally call this repeatedly, providing the percentComplete
    parameter to indicate what proportion of the work is complete. When the operation finishes,
    the SlowService will use either the SetOperationFailed or SetOperationSucceeded operation of
    this Operations Control API to indicate the final outcome.
    Note that the endpoints don't protect against concurrent requests to update a single operation;
    should this happen, the last message processed will always take precedence.'

servers:
  - url: http://localhost:7078/api
paths:
  '/{tenantId}/api/operationscontrol/{operationId}/create':
    put:
      tags:
        - Operations
      summary: Create a new operation, which will be in the "Not Started" state
      operationId: CreateOperation
      parameters:
        - name: tenantId
          in: path
          description: Id of the Tenant.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: Id of the Operation.
          required: true
          schema:
            type: string
            format: uuid
        - name: resourceLocation
          in: query
          description: Optional URI based location of the result of the Operation.
          required: false
          schema:
            type: string
        - name: expireAfter
          in: query
          description: Optional number of seconds for which to retain data about this operation after its last state change
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        required: false
        content:
          text/plain:
            schema:
              type: string
              maxLength: 10240
      responses:
        '201':
          description: Operation created
          headers:
            Location:
              description: A link to endpoint in the Operations Status API for this operation
              schema:
                type: string
        '400':
            description: Bad request
        '401':
            description: Unauthorized
        '404':
            description: Not found
        '409':
          description: Conflict - an operation with this id already exists and has moved out of the "Not Started" state
  '/{tenantId}/api/operationscontrol/{operationId}/failed':
    put:
      tags:
        - Operations
      summary: Set an existing operation into the "Failed" state
      operationId: SetOperationFailed
      parameters:
        - name: tenantId
          in: path
          description: Id of the Tenant.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: Id of the Operation.
          required: true
          schema:
            type: string
            format: uuid
        - name: expireAfter
          in: query
          description: Optional number of seconds for which to retain data about this operation after its last state change
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        required: false
        content:
          text/plain:
            schema:
              type: string
              maxLength: 10240
      responses:
        '201':
          description: Operation status change created
          headers:
            Location:
              description: A link to endpoint in the Operations Status API for this operation
              schema:
                type: string
        '400':
            description: Bad request
        '401':
            description: Unauthorized
        '404':
            description: Not found
        '409':
          description: Conflict - the operation was already in the "Succeeded" state so it cannot be moved into the "Failed" state
          content:
            # This should really be application/problem+json but AutoRest chokes on it
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
  '/{tenantId}/api/operationscontrol/{operationId}/running':
    put:
      tags:
        - Operations
      summary: Set an operation into the "Running" state
      operationId: SetOperationRunning
      parameters:
        - name: tenantId
          in: path
          description: Id of the Tenant.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: Id of the Operation.
          required: true
          schema:
            type: string
            format: uuid
        - name: percentComplete
          in: query
          description: Optional percentage completeness of the Operation.
          required: false
          schema:
            type: integer
            format: int32
        - name: contentId
          in: query
          description: Optional Content Id of Localized Content status message.
          required: false
          schema:
            type: string
        - name: expireAfter
          in: query
          description: Optional number of seconds for which to retain data about this operation after its last state change
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        required: false
        content:
          text/plain:
            schema:
              type: string
              maxLength: 10240
      responses:
        '201':
          description: Operation status change created
          headers:
            Location:
              description: A link to endpoint in the Operations Status API for this operation
              schema:
                type: string
        '400':
            description: Bad request
        '401':
            description: Unauthorized
        '404':
            description: Not found
        '409':
          description: Conflict - the operation was already in the "Succeeded" or "Failed" state so it cannot be moved into the "Running" state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
  '/{tenantId}/api/operationscontrol/{operationId}/succeeded':
    put:
      tags:
        - Operations
      summary: Set an operation into the "Succeeded" state
      operationId: SetOperationSucceeded
      parameters:
        - name: tenantId
          in: path
          description: Id of the Tenant.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: Id of Operation.
          required: true
          schema:
            type: string
            format: uuid
        - name: resourceLocation
          in: query
          description: Optional URI based location of the result of the Operation.
          required: false
          schema:
            type: string
        - name: expireAfter
          in: query
          description: Optional number of seconds for which to retain data about this operation after its last state change
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        required: false
        content:
          text/plain:
            schema:
              type: string
              maxLength: 10240
      responses:
        '201':
          description: Operation status change created
          headers:
            Location:
              description: A link to endpoint in the Operations Status API for this operation
              schema:
                type: string
        '400':
            description: Bad request
        '401':
            description: Unauthorized
        '404':
            description: Not found
        '409':
          description: Conflict - the operation was already in the "Failed" state so it cannot be moved into the "Running" state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
components:
  schemas:
    Operation:
      description: A long-running operation
      type: object
      required: ["createdDateTime", "id", "lastActionDateTime", "status", "tenantId"]
      additionalProperties: false
      properties:
        createdDateTime:
          $ref: '#/components/schemas/DateTimeInstant'
        id:
          description: This operation's unique identifier
          format: uuid
          type: string
        lastActionDateTime:
          $ref: '#/components/schemas/DateTimeInstant'
        contentId:
          description: The unique id for content describing the operation's current state
          type: string
          nullable: true
        percentComplete:
          description: A number from 0 to 100 indicating how much of the operation's work is complete
          format: int32
          type: integer
          nullable: true
        resourceLocation:
          description: The resource that this long-running operation is producing or has produced
          type: string
          nullable: true
        status:
          description: The operation's current state
          enum:
            - NotStarted
            - Running
            - Succeeded
            - Failed
          type: string
        clientData:
          description: A small amount of arbitrary data provided by the operation being tracked.
          type: string
          nullable: true
        tenantId:
          description: The id of the tenant to which this operation belongs
          format: uuid
          type: string
    ProblemDetails:
      required:
        - status
        - detail
      properties:
        status:
          type: integer
          format: int32
        detail:
          type: string
        title:
          type: string
        instance:
          type: string
          format: url
        type: 
          type: string
          format: url
        validationErrors: 
          type: array
          items:
            oneOf:
            - type: array
            - type: boolean
            - type: integer
            - type: number
            - type: object
            - type: string
      additionalProperties: true
    DateTimeInstant:
      description: Represents a particular moment in time
      type: object
      required: ["dateTimeOffset", "unixTime"]
      additionalProperties: false
      properties:
        dateTimeOffset:
          description: The instant represented as a date and time with optional offset
          format: date-time
          type: string
        unixTime:
          description: The instance represented as the number of seconds that have elapsed since midnight (UTC) 1st January 1970
          format: int64
          type: integer