// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Operations.Client.OperationsStatus.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A long-running operation
    /// </summary>
    public partial class Operation
    {
        /// <summary>
        /// Initializes a new instance of the Operation class.
        /// </summary>
        public Operation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Operation class.
        /// </summary>
        /// <param name="id">This operation's unique identifier</param>
        /// <param name="status">The operation's current state. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'</param>
        /// <param name="tenantId">The id of the tenant to which this operation
        /// belongs</param>
        /// <param name="contentId">The unique id for content describing the
        /// operation's current state</param>
        /// <param name="percentComplete">A number from 0 to 100 indicating how
        /// much of the operation's work is complete</param>
        /// <param name="resourceLocation">The resource that this long-running
        /// operation is producing or has produced</param>
        /// <param name="clientData">A small amount of arbitrary data provided
        /// by the operation being tracked.</param>
        public Operation(DateTimeInstant createdDateTime, System.Guid id, DateTimeInstant lastActionDateTime, string status, string tenantId, string contentId = default(string), int? percentComplete = default(int?), string resourceLocation = default(string), string clientData = default(string))
        {
            CreatedDateTime = createdDateTime;
            Id = id;
            LastActionDateTime = lastActionDateTime;
            ContentId = contentId;
            PercentComplete = percentComplete;
            ResourceLocation = resourceLocation;
            Status = status;
            ClientData = clientData;
            TenantId = tenantId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public DateTimeInstant CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets this operation's unique identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastActionDateTime")]
        public DateTimeInstant LastActionDateTime { get; set; }

        /// <summary>
        /// Gets or sets the unique id for content describing the operation's
        /// current state
        /// </summary>
        [JsonProperty(PropertyName = "contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or sets a number from 0 to 100 indicating how much of the
        /// operation's work is complete
        /// </summary>
        [JsonProperty(PropertyName = "percentComplete")]
        public int? PercentComplete { get; set; }

        /// <summary>
        /// Gets or sets the resource that this long-running operation is
        /// producing or has produced
        /// </summary>
        [JsonProperty(PropertyName = "resourceLocation")]
        public string ResourceLocation { get; set; }

        /// <summary>
        /// Gets or sets the operation's current state. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets a small amount of arbitrary data provided by the
        /// operation being tracked.
        /// </summary>
        [JsonProperty(PropertyName = "clientData")]
        public string ClientData { get; set; }

        /// <summary>
        /// Gets or sets the id of the tenant to which this operation belongs
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CreatedDateTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedDateTime");
            }
            if (LastActionDateTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastActionDateTime");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (TenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TenantId");
            }
            if (CreatedDateTime != null)
            {
                CreatedDateTime.Validate();
            }
            if (LastActionDateTime != null)
            {
                LastActionDateTime.Validate();
            }
        }
    }
}
