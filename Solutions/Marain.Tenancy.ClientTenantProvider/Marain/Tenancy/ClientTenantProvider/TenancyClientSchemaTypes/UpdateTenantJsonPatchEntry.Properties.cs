//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct UpdateTenantJsonPatchEntry
{
    /// <summary>
    /// JSON property name for <see cref = "Op"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> OpUtf8JsonPropertyName = new byte[]{111, 112};
    /// <summary>
    /// JSON property name for <see cref = "Op"/>.
    /// </summary>
    public const string OpJsonPropertyName = "op";
    /// <summary>
    /// JSON property name for <see cref = "Path"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PathUtf8JsonPropertyName = new byte[]{112, 97, 116, 104};
    /// <summary>
    /// JSON property name for <see cref = "Path"/>.
    /// </summary>
    public const string PathJsonPropertyName = "path";
    /// <summary>
    /// JSON property name for <see cref = "Value"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ValueUtf8JsonPropertyName = new byte[]{118, 97, 108, 117, 101};
    /// <summary>
    /// JSON property name for <see cref = "Value"/>.
    /// </summary>
    public const string ValueJsonPropertyName = "value";
    /// <summary>
    /// Gets Op.
    /// </summary>
    public Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.OpEntity Op
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OpUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.OpEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OpJsonPropertyName, out JsonAny result))
                {
                    return result.As<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.OpEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Path.
    /// </summary>
    public Corvus.Json.JsonString Path
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PathUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PathJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Value.
    /// </summary>
    public Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity Value
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ValueUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "UpdateTenantJsonPatchEntry"/>.
    /// </summary>
    public static UpdateTenantJsonPatchEntry Create(Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.OpEntity op, Corvus.Json.JsonString path, Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity? value = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(OpJsonPropertyName, op.AsAny);
        builder.Add(PathJsonPropertyName, path.AsAny);
        if (value is Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity value__)
        {
            builder.Add(ValueJsonPropertyName, value__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets op.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public UpdateTenantJsonPatchEntry WithOp(in Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.OpEntity value)
    {
        return this.SetProperty(OpJsonPropertyName, value);
    }

    /// <summary>
    /// Sets path.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public UpdateTenantJsonPatchEntry WithPath(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PathJsonPropertyName, value);
    }

    /// <summary>
    /// Sets value.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public UpdateTenantJsonPatchEntry WithValue(in Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity value)
    {
        return this.SetProperty(ValueJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateOp(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.OpEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePath(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.UpdateTenantJsonPatchEntry.ValueEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(OpUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateOp;
                return true;
            }
            else if (property.NameEquals(PathUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidatePath;
                return true;
            }
            else if (property.NameEquals(ValueUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateValue;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(OpJsonPropertyName))
            {
                propertyValidator = __CorvusValidateOp;
                return true;
            }
            else if (property.NameEquals(PathJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePath;
                return true;
            }
            else if (property.NameEquals(ValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateValue;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}