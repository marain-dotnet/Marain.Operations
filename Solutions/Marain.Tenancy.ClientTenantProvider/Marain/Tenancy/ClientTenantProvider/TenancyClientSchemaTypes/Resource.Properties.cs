//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Resource
{
    /// <summary>
    /// JSON property name for <see cref = "Embedded"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> EmbeddedUtf8JsonPropertyName = new byte[]{95, 101, 109, 98, 101, 100, 100, 101, 100};
    /// <summary>
    /// JSON property name for <see cref = "Embedded"/>.
    /// </summary>
    public const string EmbeddedJsonPropertyName = "_embedded";
    /// <summary>
    /// JSON property name for <see cref = "Links"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> LinksUtf8JsonPropertyName = new byte[]{95, 108, 105, 110, 107, 115};
    /// <summary>
    /// JSON property name for <see cref = "Links"/>.
    /// </summary>
    public const string LinksJsonPropertyName = "_links";
    /// <summary>
    /// Gets Embedded.
    /// </summary>
    public Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity Embedded
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmbeddedUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmbeddedJsonPropertyName, out JsonAny result))
                {
                    return result.As<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Links.
    /// </summary>
    public Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity Links
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LinksUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LinksJsonPropertyName, out JsonAny result))
                {
                    return result.As<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Resource"/>.
    /// </summary>
    public static Resource Create(Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity? embedded = null, Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity? links = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        if (embedded is Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity embedded__)
        {
            builder.Add(EmbeddedJsonPropertyName, embedded__.AsAny);
        }

        if (links is Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity links__)
        {
            builder.Add(LinksJsonPropertyName, links__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets _embedded.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Resource WithEmbedded(in Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity value)
    {
        return this.SetProperty(EmbeddedJsonPropertyName, value);
    }

    /// <summary>
    /// Sets _links.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Resource WithLinks(in Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity value)
    {
        return this.SetProperty(LinksJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateEmbedded(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.EmbeddedEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLinks(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.Resource.LinksEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(EmbeddedUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateEmbedded;
                return true;
            }
            else if (property.NameEquals(LinksUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateLinks;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(EmbeddedJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmbedded;
                return true;
            }
            else if (property.NameEquals(LinksJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLinks;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}