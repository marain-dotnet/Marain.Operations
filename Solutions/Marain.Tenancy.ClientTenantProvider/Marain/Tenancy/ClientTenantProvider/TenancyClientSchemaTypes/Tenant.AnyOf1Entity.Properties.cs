//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes;
public readonly partial struct Tenant
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct AnyOf1Entity
    {
        /// <summary>
        /// JSON property name for <see cref = "Id"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> IdUtf8JsonPropertyName = new byte[]{105, 100};
        /// <summary>
        /// JSON property name for <see cref = "Id"/>.
        /// </summary>
        public const string IdJsonPropertyName = "id";
        /// <summary>
        /// JSON property name for <see cref = "Name"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> NameUtf8JsonPropertyName = new byte[]{110, 97, 109, 101};
        /// <summary>
        /// JSON property name for <see cref = "Name"/>.
        /// </summary>
        public const string NameJsonPropertyName = "name";
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ContentTypeUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 101, 110, 116, 84, 121, 112, 101};
        /// <summary>
        /// JSON property name for <see cref = "ContentType"/>.
        /// </summary>
        public const string ContentTypeJsonPropertyName = "contentType";
        /// <summary>
        /// JSON property name for <see cref = "ETag"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ETagUtf8JsonPropertyName = new byte[]{101, 84, 97, 103};
        /// <summary>
        /// JSON property name for <see cref = "ETag"/>.
        /// </summary>
        public const string ETagJsonPropertyName = "eTag";
        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PropertiesUtf8JsonPropertyName = new byte[]{112, 114, 111, 112, 101, 114, 116, 105, 101, 115};
        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public const string PropertiesJsonPropertyName = "properties";
        /// <summary>
        /// Gets Id.
        /// </summary>
        public Corvus.Json.JsonString Id
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(IdUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(IdJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Name.
        /// </summary>
        public Corvus.Json.JsonString Name
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(NameJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ContentType.
        /// </summary>
        public Corvus.Json.JsonString ContentType
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ContentTypeUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ContentTypeJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets ETag.
        /// </summary>
        public Corvus.Json.JsonString ETag
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ETagUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ETagJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Properties.
        /// </summary>
        public Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag Properties
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(PropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(PropertiesJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "AnyOf1Entity"/>.
        /// </summary>
        public static AnyOf1Entity Create(Corvus.Json.JsonString id, Corvus.Json.JsonString name, Corvus.Json.JsonString contentType, Corvus.Json.JsonString? eTag = null, Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag? properties = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            builder.Add(IdJsonPropertyName, id.AsAny);
            builder.Add(NameJsonPropertyName, name.AsAny);
            builder.Add(ContentTypeJsonPropertyName, contentType.AsAny);
            if (eTag is Corvus.Json.JsonString eTag__)
            {
                builder.Add(ETagJsonPropertyName, eTag__.AsAny);
            }

            if (properties is Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag properties__)
            {
                builder.Add(PropertiesJsonPropertyName, properties__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets id.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public AnyOf1Entity WithId(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(IdJsonPropertyName, value);
        }

        /// <summary>
        /// Sets name.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public AnyOf1Entity WithName(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(NameJsonPropertyName, value);
        }

        /// <summary>
        /// Sets contentType.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public AnyOf1Entity WithContentType(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(ContentTypeJsonPropertyName, value);
        }

        /// <summary>
        /// Sets eTag.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public AnyOf1Entity WithETag(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(ETagJsonPropertyName, value);
        }

        /// <summary>
        /// Sets properties.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public AnyOf1Entity WithProperties(in Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag value)
        {
            return this.SetProperty(PropertiesJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidateId(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateContentType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateETag(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes.PropertyBag>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(IdUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateId;
                    return true;
                }
                else if (property.NameEquals(NameUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateName;
                    return true;
                }
                else if (property.NameEquals(ContentTypeUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateContentType;
                    return true;
                }
                else if (property.NameEquals(ETagUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateETag;
                    return true;
                }
                else if (property.NameEquals(PropertiesUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateProperties;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(IdJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateId;
                    return true;
                }
                else if (property.NameEquals(NameJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateName;
                    return true;
                }
                else if (property.NameEquals(ContentTypeJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateContentType;
                    return true;
                }
                else if (property.NameEquals(ETagJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateETag;
                    return true;
                }
                else if (property.NameEquals(PropertiesJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateProperties;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}